[gd_scene load_steps=9 format=2]

[ext_resource path="res://Assets/Actors/Characters/OurGuy/OurGuy.png" type="Texture" id=1]
[ext_resource path="res://Assets/Actors/Characters/OurGuy/Scripts/OurGuyStateMachine.gd" type="Script" id=2]
[ext_resource path="res://Assets/Actors/Characters/OurGuy/Scripts/States/Idle.gd" type="Script" id=3]
[ext_resource path="res://Assets/Actors/Characters/OurGuy/Scripts/States/Move.gd" type="Script" id=4]
[ext_resource path="res://Assets/Actors/Characters/OurGuy/Scripts/States/Jump.gd" type="Script" id=5]
[ext_resource path="res://Assets/GUI/GUI.tscn" type="PackedScene" id=6]

[sub_resource type="GDScript" id=1]
script/source = "extends KinematicBody2D

const _Sword = preload(\"OurSword.tscn\")

export var _HorizontalVelocity := 80.0
export var _JumpForce := 180
export var _JumpingDuration := 0.3
export var _DmgDuration := 1.0
export var _DiagonalFactor := 1.3
export var _Accel := 0.1
export var _Deaccel := 0.2
export var _SprintVelocity := 130.0

var _CurrSpeed := Vector2(0, 0)
var _JumpDeaccel := 0.05
var _IsJumping := false
var _GoingLeft := false
var _Attacking := false
var _TakingDmg := false

signal CoinPickedUp()

func calcSpriteSide() -> void:
	if _CurrSpeed.x > 0 && _GoingLeft:
		_GoingLeft = false
		$Sprite.scale.x *= -1
	elif _CurrSpeed.x < 0 && !_GoingLeft:
		_GoingLeft = true
		$Sprite.scale.x *= -1

func getFinalYSpeed() -> void:
	if self.is_on_floor():
		_CurrSpeed.y = 1.0
	else:
		if _IsJumping:
			_CurrSpeed.y = lerp(_CurrSpeed.y, 0, _JumpDeaccel)
		else:
			_CurrSpeed.y = lerp(
				_CurrSpeed.y,
				GlobalVars.GravitySpeed,
				GlobalVars.GravityAccel
			)

func _process(delta):
	if _IsJumping:
		self.move_and_slide(_CurrSpeed, Vector2.UP, true)
	else:
		self.move_and_slide_with_snap(_CurrSpeed, Vector2.DOWN, Vector2.UP, true)
	
	self.getFinalYSpeed()
	
	calcSpriteSide()

func EngageAttack():
	_Attacking = true
	var sword_obj = _Sword.instance()
	var anim = sword_obj.get_node(\"AnimationPlayer\")
	
	sword_obj.connect(\"AttackEnded\", self, \"DisengageAttack\")
	sword_obj.scale.x = self.get_node(\"Sprite\").scale.x
	
	if _GoingLeft:
		anim.play(\"AttackL\")
	else:
		anim.play(\"AttackR\")
	
	self.get_node(\"SwordSpawn\").add_child(sword_obj)

func DisengageAttack():
	self._Attacking = false

func OnDamage(Damage : int):
	if !_TakingDmg:
		_TakingDmg = true
		OurGuyVars.Health -= Damage
		self.get_node(\"DmgTimer\").start(_DmgDuration)
		
		print(\"AAAI AI\")
		if OurGuyVars.Health < 1:
			self.get_tree().reload_current_scene()
			OurGuyVars.Death()
			print(\"=== Game Over ===\")

func _on_DmgTimer_timeout():
	_TakingDmg = false

func _on_JumpTimer_timeout():
	_IsJumping = false

func _on_Coin_pickedUp():
	OurGuyVars.Coins += 1
	emit_signal(\"CoinPickedUp\")
"

[sub_resource type="RectangleShape2D" id=2]
extents = Vector2( 5.04, 14.9329 )

[node name="OurGuy" type="KinematicBody2D"]
collision_mask = 14
script = SubResource( 1 )

[node name="StateMachine" type="Node" parent="."]
script = ExtResource( 2 )

[node name="Idle" type="Node" parent="StateMachine"]
script = ExtResource( 3 )

[node name="Move" type="Node" parent="StateMachine"]
script = ExtResource( 4 )

[node name="Jump" type="Node" parent="StateMachine"]
script = ExtResource( 5 )

[node name="Sprite" type="Sprite" parent="."]
position = Vector2( 0, -16 )
texture = ExtResource( 1 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2( 0, -15 )
shape = SubResource( 2 )

[node name="JumpTimer" type="Timer" parent="."]
one_shot = true

[node name="DmgTimer" type="Timer" parent="."]
one_shot = true

[node name="Camera2D" type="Camera2D" parent="."]
position = Vector2( 0, -15 )
current = true
process_mode = 0
drag_margin_h_enabled = true
drag_margin_v_enabled = true

[node name="SwordSpawn" type="Node2D" parent="."]
position = Vector2( 0, -16 )

[node name="GUI" parent="." instance=ExtResource( 6 )]
offset = Vector2( 4, 4 )
transform = Transform2D( 1, 0, 0, 1, 4, 4 )
[connection signal="CoinPickedUp" from="." to="GUI" method="_onCoinPickedUp"]
[connection signal="timeout" from="JumpTimer" to="." method="_on_JumpTimer_timeout"]
[connection signal="timeout" from="DmgTimer" to="." method="_on_DmgTimer_timeout"]
